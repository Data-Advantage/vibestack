-- 000-foundation.sql
-- 
-- This migration establishes the foundation for LaunchWeek.ai database structure.
-- It creates necessary extensions, schemas, and type definitions that will be used
-- throughout the application. This is the first step in our migration process.

-- =============================================================================
-- EXTENSIONS
-- =============================================================================

-- Core extensions for UUID generation, cryptography, and other basic functionality
CREATE EXTENSION IF NOT EXISTS pgcrypto;      -- For UUID generation and cryptographic functions
CREATE EXTENSION IF NOT EXISTS pg_stat_statements; -- For query performance monitoring
CREATE EXTENSION IF NOT EXISTS pgjwt;         -- For JWT handling

-- Text search extensions for improved search capabilities
CREATE EXTENSION IF NOT EXISTS pg_trgm;       -- For text similarity and fuzzy project search

-- =============================================================================
-- SCHEMAS
-- =============================================================================

-- User-generated content and application data
-- Contains projects, documents, and other user-created entities
CREATE SCHEMA IF NOT EXISTS api;
COMMENT ON SCHEMA api IS 'Contains user-generated content and application data including projects, documents, and user-customized implementation guides';

-- Sensitive internal operations not directly accessible to users
-- Contains financial data, system operations logs, and administrative functions
CREATE SCHEMA IF NOT EXISTS internal;
COMMENT ON SCHEMA internal IS 'Contains sensitive operations, financial data, and system-level records requiring special access controls';

-- Publicly available lookup tables and reusable templates
-- Contains reference data used across the application
CREATE SCHEMA IF NOT EXISTS reference;
COMMENT ON SCHEMA reference IS 'Contains lookup tables, enums, and templates available to all authenticated users';

-- Payment processing and subscription management
-- Contains tables synced with Stripe for billing functionality
CREATE SCHEMA IF NOT EXISTS stripe;
COMMENT ON SCHEMA stripe IS 'Contains data synced from Stripe webhooks for payment processing and subscription management';

-- Application configuration and settings
-- Contains system-wide configuration parameters
CREATE SCHEMA IF NOT EXISTS config;
COMMENT ON SCHEMA config IS 'Contains application configuration settings and feature parameters';

-- Analytics and reporting data
-- Contains views for business metrics and usage statistics
CREATE SCHEMA IF NOT EXISTS analytics;
COMMENT ON SCHEMA analytics IS 'Contains reporting views and aggregated metrics for analytics purposes';

-- =============================================================================
-- TYPES AND DOMAINS
-- =============================================================================

-- Project status enum
-- Used to track the current state of a project
CREATE TYPE reference.project_status AS ENUM (
  'draft',        -- Initial project creation, not yet fully defined
  'in_progress',  -- Active project being worked on
  'completed'     -- Project has completed all required steps
);
COMMENT ON TYPE reference.project_status IS 'Represents the current status of a project';

-- Document status enum
-- Used to track the current state of a document
CREATE TYPE reference.document_status AS ENUM (
  'draft',        -- Document started but not complete
  'in_progress',  -- Document being actively edited
  'completed'     -- Document finalized
);
COMMENT ON TYPE reference.document_status IS 'Represents the current status of a document';

-- Document type enum
-- Identifies different types of documents that can be generated
CREATE TYPE reference.document_type AS ENUM (
  'prd',                  -- Product Requirements Document
  'marketing',            -- Marketing content
  'database_schema',      -- Database schema definition
  'implementation_guide'  -- Technical implementation guide
);
COMMENT ON TYPE reference.document_type IS 'Identifies the type of document generated by the platform';

-- Framework day enum
-- Represents the different days in the 5-day framework
CREATE TYPE reference.framework_day AS ENUM (
  'create',    -- Day 1: Create (MVP focus)
  'refine',    -- Day 2: Refine (future)
  'build',     -- Day 3: Build (future)
  'position',  -- Day 4: Position (future)
  'launch'     -- Day 5: Launch (future)
);
COMMENT ON TYPE reference.framework_day IS 'Represents the different days in the 5-day launch framework';

-- Credit transaction type enum
-- Defines different types of credit transactions
CREATE TYPE reference.credit_transaction_type AS ENUM (
  'purchase',   -- Credits purchased by the user
  'allocation', -- Credits allocated from subscription
  'usage',      -- Credits consumed by using features
  'expiration', -- Credits expired at end of billing period
  'refund'      -- Credits refunded to the user
);
COMMENT ON TYPE reference.credit_transaction_type IS 'Defines the type of credit transaction';

-- URL domain type
-- Validates that a string is a properly formatted URL
CREATE DOMAIN reference.url_type AS text
  CHECK (VALUE ~ '^(https?:\/\/)?(www\.)?[-a-zA-Z0-9@:%._\+~#=]{1,256}\.[a-zA-Z0-9()]{1,6}\b([-a-zA-Z0-9()@:%_\+.~#?&//=]*)$');
COMMENT ON DOMAIN reference.url_type IS 'Ensures a string is a valid URL format';

-- Positive integer domain type
-- Ensures a value is a non-negative integer
CREATE DOMAIN reference.positive_integer AS integer
  CHECK (VALUE >= 0);
COMMENT ON DOMAIN reference.positive_integer IS 'Ensures an integer value is non-negative, used for credit amounts';